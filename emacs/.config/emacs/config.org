#+TITLE: Sean's GNU Emacs Config

** User Interface Tweaks
#+begin_src emacs-lisp
  ; Disable bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ; Display Line Numbers and Truncated Lines
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

  ; Change font size
  (set-face-attribute 'default nil :height 140)

  (setq visible-bell t)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
; Leader
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-auto-indent nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  ; For evil collection 
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config ;; tweak evil after loading it
  (evil-mode))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** General
#+begin_src emacs-lisp
(define-prefix-command 'my-leader-map)
(use-package general
  :ensure t
  :init
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  :config
  (general-define-key
   :states '(normal visual motion)
   :keymaps 'override
   "," 'my-leader-map))

(evil-define-key nil my-leader-map
    ;; add your bindings here:
    "b"  'switch-to-buffer
    "B"  'project-switch-to-buffer
    "pf" 'project-find-file
    "ps" 'project-shell-command
    "rf" 'recentf-open
    "rse" 'restart-emacs
    ;; etc.
    )
#+end_src

** Nord Theme
  (projectile-mode +1))
#+end_src

** Vertico + Savehist + Emacs
#+begin_src emacs-lisp
  ;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** Recentf
#+begin_src emacs-lisp
(use-package recentf
 :init
 (setq recentf-max-menu-items 25)
 (setq recentf-max-saved-items 25))
#+end_src

#+TITLE: Sean's GNU Emacs Config

** User Interface Tweaks
#+begin_src emacs-lisp
  ; Disable bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode 0)
  (pixel-scroll-precision-mode t)
  ; Display Line Numbers and Truncated Lines
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

; (setq scroll-step 1)
; (setq scroll-conservatively 10000)
; (setq scroll-margin 10)
  ; Change font size
  (set-face-attribute 'default nil :height 140)

  (setq visible-bell t)
#+end_src

** User-defined macros
#+begin_src emacs-lisp
(defmacro make-neutral (map)
  "Create evil-style window movement for a given MAP."
  `(progn
     (define-key ,map (kbd "C-j") 'evil-window-down)
     (define-key ,map (kbd "C-k") 'evil-window-up)
     (define-key ,map (kbd "C-h") 'evil-window-left)
     (define-key ,map (kbd "C-l") 'evil-window-right)))
#+end_src
** Evil Mode
#+begin_src emacs-lisp
  ; Leader
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-auto-indent nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  ; For evil collection
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-undo-system 'undo-redo)
  :config ;; tweak evil after loading it
  (evil-mode)
  (make-neutral evil-normal-state-map))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** Evil Escape
#+begin_src emacs-lisp
(use-package evil-escape
 :ensure t
 :init
 (setq-default evil-escape-key-sequence "jk")
 :config
 (evil-escape-mode t))
#+end_src

** General
#+begin_src emacs-lisp
  (define-prefix-command 'my-leader-map)
  (use-package general
    :ensure t
    :init
    (setq general-override-states '(insert
				    emacs
				    hybrid
				    normal
				    visual
				    motion
				    operator
				    replace))
    :config
    (general-define-key
     :states '(normal visual motion)
     :keymaps 'override
     "," 'my-leader-map))

(evil-define-key nil my-leader-map
  ;; add your bindings here:
  "B"  'project-switch-to-buffer
  "pf" 'project-find-file
  "rf" 'recentf-open
  "rse" 'restart-emacs
  ; Projectile related
  "pf" 'projectile-find-file
  "ps" 'projectile-switch-project
  ; Buffer
  "bb" 'switch-to-buffer
  ;; etc.
  )
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-x C-r") 'projectile-ripgrep)
  (projectile-mode +1))
#+end_src

** Nord theme
#+begin_src emacs-lisp
(use-package nord-theme
  :ensure t
  :config
  (load-theme 'nord t))
#+end_src

** Vertico + Savehist + Emacs
#+begin_src emacs-lisp
    ;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
	    (replace-regexp-in-string
	     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
	     crm-separator)
	    (car args))
    (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
  '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

    ;; Optionally use the `orderless' completion style.
(use-package orderless
  :ensure t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Recentf
#+begin_src emacs-lisp
(use-package recentf
 :init
 (setq recentf-max-menu-items 25)
 (setq recentf-max-saved-items 25))
#+end_src

** Which-key
#+begin_src emacs-lisp
(use-package which-key
 :ensure t
 :config
 (which-key-mode))
#+end_src

